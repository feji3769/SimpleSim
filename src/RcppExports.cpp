// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// SimMixC
arma::mat SimMixC(int N, arma::colvec mu, arma::colvec sigma, std::vector<double> p);
RcppExport SEXP _SimpleSim_SimMixC(SEXP NSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(SimMixC(N, mu, sigma, p));
    return rcpp_result_gen;
END_RCPP
}
// SimSwissRollC
List SimSwissRollC(int N, double sigma);
RcppExport SEXP _SimpleSim_SimSwissRollC(SEXP NSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(SimSwissRollC(N, sigma));
    return rcpp_result_gen;
END_RCPP
}
// SimBlobsC
List SimBlobsC(arma::colvec N, arma::mat centers);
RcppExport SEXP _SimpleSim_SimBlobsC(SEXP NSEXP, SEXP centersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type N(NSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type centers(centersSEXP);
    rcpp_result_gen = Rcpp::wrap(SimBlobsC(N, centers));
    return rcpp_result_gen;
END_RCPP
}
// SimFriedman1C
List SimFriedman1C(int N, int nFeatures, double sigma);
RcppExport SEXP _SimpleSim_SimFriedman1C(SEXP NSEXP, SEXP nFeaturesSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type nFeatures(nFeaturesSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(SimFriedman1C(N, nFeatures, sigma));
    return rcpp_result_gen;
END_RCPP
}
// SimFriedman2C
List SimFriedman2C(int N, double sigma);
RcppExport SEXP _SimpleSim_SimFriedman2C(SEXP NSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(SimFriedman2C(N, sigma));
    return rcpp_result_gen;
END_RCPP
}
// SimFriedman3C
List SimFriedman3C(int N, double sigma);
RcppExport SEXP _SimpleSim_SimFriedman3C(SEXP NSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(SimFriedman3C(N, sigma));
    return rcpp_result_gen;
END_RCPP
}
// SimPolyChangePointC
List SimPolyChangePointC(int N, double sigma, arma::colvec xRange, double x0, arma::colvec m1, arma::colvec m2);
RcppExport SEXP _SimpleSim_SimPolyChangePointC(SEXP NSEXP, SEXP sigmaSEXP, SEXP xRangeSEXP, SEXP x0SEXP, SEXP m1SEXP, SEXP m2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type xRange(xRangeSEXP);
    Rcpp::traits::input_parameter< double >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type m1(m1SEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type m2(m2SEXP);
    rcpp_result_gen = Rcpp::wrap(SimPolyChangePointC(N, sigma, xRange, x0, m1, m2));
    return rcpp_result_gen;
END_RCPP
}
// SimSCurveC
List SimSCurveC(int N, double sigma);
RcppExport SEXP _SimpleSim_SimSCurveC(SEXP NSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(SimSCurveC(N, sigma));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SimpleSim_SimMixC", (DL_FUNC) &_SimpleSim_SimMixC, 4},
    {"_SimpleSim_SimSwissRollC", (DL_FUNC) &_SimpleSim_SimSwissRollC, 2},
    {"_SimpleSim_SimBlobsC", (DL_FUNC) &_SimpleSim_SimBlobsC, 2},
    {"_SimpleSim_SimFriedman1C", (DL_FUNC) &_SimpleSim_SimFriedman1C, 3},
    {"_SimpleSim_SimFriedman2C", (DL_FUNC) &_SimpleSim_SimFriedman2C, 2},
    {"_SimpleSim_SimFriedman3C", (DL_FUNC) &_SimpleSim_SimFriedman3C, 2},
    {"_SimpleSim_SimPolyChangePointC", (DL_FUNC) &_SimpleSim_SimPolyChangePointC, 6},
    {"_SimpleSim_SimSCurveC", (DL_FUNC) &_SimpleSim_SimSCurveC, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_SimpleSim(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
